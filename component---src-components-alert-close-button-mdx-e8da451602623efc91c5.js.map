{"version":3,"sources":["webpack:///./src/components/alert/CloseButton.mdx","webpack:///./src/components/alert/close.jsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_2___default","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__","assign","mdxType","id","docz__WEBPACK_IMPORTED_MODULE_7__","of","CloseButton","_close_jsx__WEBPACK_IMPORTED_MODULE_6__","__position","__code","__scope","this","CloseButtonWrapper","Playground","Props","isMDXComponent","StyledCloseButton","styled","dismiss","dismissed","dismissable","onClick","_React$useState","React","useState","clicked","setClicked","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","onMouseOver","onMouseOut","console","log","style","display","backgroundColor","_primer_components__WEBPACK_IMPORTED_MODULE_5__","icon","X","withConfig","displayName","componentId","_React$useState2","setDismissed","_React$useState3","hidden","setHidden","useEffect","propTypes","PropTypes","func","_React$useState4","count","setCount","border","flexDirection","Item","m","alignSelf"],"mappings":"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","file":"component---src-components-alert-close-button-mdx-e8da451602623efc91c5.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyle/git/docz/.docz/app/components/Layout.js\";\nimport CloseButton, { CloseButtonWrapper } from './close.jsx';\nimport { Playground, Props } from 'docz';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`props`}</h2>\n    <Props of={CloseButton} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-close-button\"\n    }}>{`Basic Close Button`}</h2>\n    <CloseButton mdxType=\"CloseButton\" />\n    <Playground __position={2} __code={'<CloseButton />'} __scope={{\n      props: this ? this.props : props,\n      DefaultLayout,\n      CloseButton,\n      CloseButtonWrapper,\n      Playground,\n      Props\n    }} mdxType=\"Playground\">\n    <CloseButton mdxType=\"CloseButton\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"onclick-handler\"\n    }}>{`onClick Handler`}</h2>\n    <CloseButtonWrapper mdxType=\"CloseButtonWrapper\" />\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      ","import React from 'react'\nimport styled from 'styled-components'\nimport {StyledOcticon, BorderBox, Text, Flex} from '@primer/components'\nimport { PropTypes } from 'prop-types'\nimport { X } from '@primer/octicons-react'\n\n\nconst CloseBtn = ({dismiss, dismissed, dismissable, onClick, ...props}) => {\n  const [clicked, setClicked] = React.useState(false)\n  \n  \n  \n  const handleMouseDown = () =>{\n    if(clicked)\n    {\n      setClicked(false)\n    }\n  }\n  const handleMouseUp = () =>{\n    if(!clicked)\n    {\n      setClicked(true)\n    }\n  }\n  \n  const dismissAlert = () =>{\n    console.log('clocked')\n    if(onClick){\n      onClick()\n    }\n    if(dismissable){\n      dismiss()\n    }\n  }\n  \n  return dismissed === 'true' ? null : (\n   <div onMouseOver={handleMouseUp} onMouseOut={handleMouseDown} onClick={dismissAlert} style={{display: 'inline-flex' ,backgroundColor: clicked ? 'grey' : 'transparent'}}>\n     <StyledOcticon {...props} icon={X}  />\n   </div>\n  )\n  \n}\n\nconst StyledCloseButton = styled(CloseBtn)`\n  &:hover {\n    cursor: pointer;\n  }\n  &:focus-within{\n    background-color: dimgray;\n    opacity: 0.2%;\n  }\n  z-index: 1000;\n  background-color: transparent;\n`\n\nconst CloseButton = props =>{\n  const [dismissed, setDismissed] = React.useState('false')\n  const [hidden, setHidden] = React.useState(null)\n  \n  const dismiss = () =>{\n    setDismissed('true')\n  }\n  \n  React.useEffect(()=>{\n    if(dismissed!=='false' && dismissed==='true')\n    {\n      setHidden(true)\n    }\n  }, [dismissed])\n  \n  console.log(hidden)\n  return (hidden === null) ? <StyledCloseButton {...props} dismiss={dismiss} dismissed={dismissed} /> : null\n  \n}\n\nCloseButton.propTypes = {\n  /** what to do when clicked */\n  onClick: PropTypes.func,\n}\n\nexport const CloseButtonWrapper = props =>{\n  const [count, setCount] = React.useState(0)\n  \n  const onClick = () =>{\n    setCount(count+1)\n  }\n  \n  return (\n   <BorderBox>\n   <Flex border={1} flexDirection={'column'} display={'flex'}>\n     <Flex.Item>\n     <Text m={4}>\n       clicked {count} times\n     </Text>\n     </Flex.Item>\n     <Flex.Item alignSelf={'flex-end'}>\n       <CloseButton onClick={onClick} display={'flex-inline'} alignSelf={'flex-end'}/>\n     </Flex.Item>\n   </Flex>\n   </BorderBox>\n  )\n}\n\nexport default CloseButton\n"],"sourceRoot":""}